version: 2.1

# Re-usable commands.
commands:
  checkout_code:
    description: "Handle composer access tokens, SSH key fingerprints and code checkout"
    steps:
      - run:
          name: Add GitHub access token for composer
          command: echo 'composer config -g github-oauth.github.com $GITHUB_TOKEN' >> $BASH_ENV
      # Add SSH user key so we can access related repositories as part of our initial clone + composer install command.
      # f8:f0 >> private fingerprint to allow Circle CI to talk to platform.sh.
      # 89:cc >> GitHub user key fingerprint.
      - add_ssh_keys:
          fingerprints:
            - "f8:f0:34:a1:0e:51:56:44:2b:9c:db:b7:2f:26:3b:48"
            - "89:cc:6e:61:6a:0e:13:ab:47:0b:25:d6:bc:90:d4:d2"
      - checkout
  composer_tasks:
    description: "Validate and install dependencies using composer"
    steps:
      - run:
          name: Validate composer.json and composer.lock file for consistency
          command: composer validate --no-check-all --strict
      - restore_cache:
          keys:
            - composer-{{ checksum "composer.lock" }}
      - run:
          name: Fetch dependencies with composer
          command: |
            composer install --no-interaction --optimize-autoloader
      - save_cache:
          key: composer-{{ checksum "composer.lock" }}
          paths:
            - $HOME/.composer/cache
  composer_tasks__no_cache:
    description: "Validate and install dependencies using composer"
    steps:
      - run:
          name: Validate composer.json and composer.lock file for consistency
          command: composer validate --no-check-all --strict
      - run:
          name: Fetch dependencies with composer
          command: |
            composer install --no-interaction --optimize-autoloader
  install_php_os_extensions:
    description: "Install a standard group of extensions and packages"
    steps:
      - run:
          name: Add OS and PHP extensions
          command: |
            sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
            sudo apt-get update
            sudo apt-get install -y libpng-dev
            sudo docker-php-ext-install gd
  install_platformsh_tools:
    description: "Install packages and tools for interacting with platform.sh API"
    steps:
      - run:
          name: Add extra OS and PHP extensions/config
          command: |
            sudo docker-php-ext-install pcntl posix
      - run:
          name: Keyscan Platform.sh region hostnames + GitHub for password-less access
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H ssh.$PLATFORM_REGION >> ~/.ssh/known_hosts
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      - run:
          name: Install the Platform.sh CLI tool
          command: |
            curl -sS https://platform.sh/cli/installer | php
  github_hosts_workaround:
    description: "Adds github.com to known hosts in container; for working locally."
    steps:
      - run:
          name: Keyscan GitHub hostname
          command: mkdir -p ~/.ssh && ssh-keyscan -H github.com >> ~/.ssh/known_hosts
  update_robots_dot_txt:
    description: "Apply custom config to robots.txt file"
    steps:
      - run:
          name: Update robots file
          command: |
            cd /home/circleci/project/web
            cp -f robots_nidirect.txt robots.txt

jobs:
  # Tests the integrity of the build, stores the results in a workspace for re-use in later jobs.
  build:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    steps:
      - checkout_code
      - install_php_os_extensions
      - composer_tasks
      - update_robots_dot_txt
      - persist_to_workspace:
          root: ./
          paths:
            - ./
  build_edge_branch:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    steps:
      - checkout_code
      - install_php_os_extensions
      - run:
          name: Switch to edge build branch
          command: |
            cd ~/project
            git checkout -b $EDGE_BUILD_BRANCH
      - run:
          name: Install dev versions of dof-dss packages with composer.
          command: |
            composer require dof-dss/nidirect-site-modules:dev-development dof-dss/nidirect-migrations:dev-development \
              dof-dss/nidirect-d8-test-install-profile:dev-development dof-dss/nicsdru_origins_theme:dev-development \
              dof-dss/nicsdru_origins_modules:dev-development dof-dss/nicsdru_nidirect_theme:dev-development
      - update_robots_dot_txt
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  # Test for coding standards.
  coding_standards:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    steps:
      - attach_workspace:
          at: ./
      - run: sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
      - run:
          name: PHPCS analysis
          command: /home/circleci/project/phpcs.sh /home/circleci/project "/home/circleci/project/web/modules/origins /home/circleci/project/web/modules/custom /home/circleci/project/web/modules/migrate /home/circleci/project/web/themes/custom"

  deprecated_code:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    steps:
      - attach_workspace:
          at: ./
      - run: sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
      - run:
          name: Deprecated code check
          command: |
            cd /home/circleci/project
            vendor/bin/drupal-check /home/circleci/project/web/modules/custom /home/circleci/project/web/modules/origins /home/circleci/project/web/modules/migrate /home/circleci/project/web/themes/custom -e "*/tests/src/*"

  # Run any unit tests and any kernel tests against a vanilla D8 site + our site config imported over it (no predefined content).
  unit_kernel_tests:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
      - image: circleci/mysql:5.7.27
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Add extra OS and PHP extensions/config
          command: |
            sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
            sudo apt-get --allow-releaseinfo-change update
            sudo apt-get install -y libpng-dev mariadb-client rsync
            sudo docker-php-ext-install gd pdo_mysql
      - run:
          name: Copy vhost into place
          command: |
            sudo cp .circleci/drupal.vhost /etc/apache2/sites-available/drupal.conf
      - run:
          name: Enable web server and vhosts
          command: |
            sudo a2enmod rewrite
            sudo a2dissite 000-default
            sudo a2ensite drupal
            sudo service apache2 start
      - run:
          name: Install Drupal and configure settings
          command: |
            # Should be scaffolded by now.
            cd /home/circleci/project/web
            cp sites/default/default.settings.php sites/default/settings.php
            cp sites/default/default.services.yml sites/default/services.yml
            # Copy in our environment specific settings to the settings.php file.
            cp /home/circleci/project/.circleci/drupal.settings.php sites/default/settings.php
            # Copy PHPUnit config into core folder.
            cp /home/circleci/project/.circleci/phpunit.circleci.xml core/
            # Install Drupal (or restore from DB dump at this point).
            ../vendor/bin/drush site-install -y --existing-config
      - run:
          name: Copy files into webroot
          command: |
            # Copy our build into position (./ suffix ensures hidden files are copied too).
            sudo rsync -avq /home/circleci/project/. /var/www/html
      - run:
          name: PHPUnit tests (unit)
          command: |
            cd /var/www/html/web/core
            ../../vendor/bin/phpunit -c /var/www/html/web/core/phpunit.circleci.xml --testsuite unit --group nidirect
      - run:
          name: PHPUnit tests (kernel)
          command: |
            cd /var/www/html/web/core
            ../../vendor/bin/phpunit -c /var/www/html/web/core/phpunit.circleci.xml --testsuite kernel --group nidirect

  # Functional tests with headless browser; run against our edge environment.
  functional_tests:
    docker:
      - image: circleci/php:7.4.15-apache-node-browsers
        environment:
          TEST_TAGS: "search content-type-validation origins_workflow regression"
      - image: drupalci/chromedriver:production
        environment:
          CHROMEDRIVER_WHITELISTED_IPS: ""
          CHROMEDRIVER_URL_BASE: "/wd/hub"
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Keyscan Platform.sh region hostnames
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H ssh.$PLATFORM_REGION >> ~/.ssh/known_hosts
      - run:
          name: Add extra extensions/config
          command: |
            # Add yarn deb repo.
            sudo apt-get update
            sudo apt-get install -y gnupg apt-transport-https libpng-dev
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            sudo echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt-get update
            sudo apt-get install -y yarn
            sudo docker-php-ext-install pcntl posix gd
      - run:
          name: Install the Platform.sh CLI tool
          command: |
            curl -sS https://platform.sh/cli/installer | php
      - run:
          name: Get our environment URL and store as a local shell variable
          command: |
            # Chromedriver won't use https so we dibble around with sed/grep to find the http url we want.
            echo 'export PLATFORM_ENV_URL=$(/home/circleci/.platformsh/bin/platform url -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH --pipe | sed -e "s|\/$||" | grep -e "^http://[^www]")' >> $BASH_ENV
      - run:
          name: Configure nightwatch settings and files
          command: |
            # Create a folder to store our nightwatch reports and screenshots
            mkdir -p /home/circleci/nightwatch-reports

            # Copy PHPUnit config into core folder.
            cp /home/circleci/project/.circleci/phpunit.circleci.xml /home/circleci/project/web/core/
            # Copy Nightwatch conf files into place.
            cat /home/circleci/project/web/core/.env.example | sed -e "s|\(^DRUPAL_TEST_BASE_URL\)\(.\+\)|\1=$PLATFORM_ENV_URL|g" > /home/circleci/project/web/core/.env
            sed -i -e "s|\(#\)\(DRUPAL_NIGHTWATCH_SEARCH_DIRECTORY\)=|\2=../|g" /home/circleci/project/web/core/.env
            sed -i -e "s|\(^DRUPAL_TEST_WEBDRIVER_HOSTNAME\)=localhost|\1=127.0.0.1|g" /home/circleci/project/web/core/.env
            sed -i -e "s|^DRUPAL_TEST_CHROMEDRIVER_AUTOSTART=true|DRUPAL_TEST_CHROMEDRIVER_AUTOSTART=false|g" /home/circleci/project/web/core/.env
            sed -i -e "s|\(#\)\(DRUPAL_TEST_WEBDRIVER_CHROME_ARGS\)=|\2=\"--disable-gpu --headless --no-sandbox\"|g" /home/circleci/project/web/core/.env
            sed -i -e "s|\(^DRUPAL_NIGHTWATCH_OUTPUT\)=reports/nightwatch|\1=/home/circleci/nightwatch-reports|g" /home/circleci/project/web/core/.env

            # Install npm packages for the projects/repos we know need them.
            for dir in core modules/custom modules/migrate/nidirect-migrations/migrate_nidirect_node; do
              cd /home/circleci/project/web/$dir
              yarn install
            done
      - run:
          name: Run tests with Nightwatch.js
          command: yarn --cwd=/home/circleci/project/web/core test:nightwatch $(for tag in $TEST_TAGS; do echo --tag $tag; done)
      - store_artifacts:
          path: /home/circleci/nightwatch-reports

  # Edge build: all dof-dss packages use HEAD on development branch, pushes to fixed non-integrating branch.
  edge_build:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    environment:
      # git variables to avoid empty committer identity errors
      EMAIL: "circleci@localhost"
      GIT_COMMITTER_NAME: "Circle CI"
      GIT_AUTHOR_NAME: "Circle CI"
    steps:
      - attach_workspace:
          at: ./
      - install_php_os_extensions
      - install_platformsh_tools
      - run:
          name: Re-point dof-dss packages to use latest development code and push.
          command: |
            cd ~/project
            git checkout -b $EDGE_BUILD_BRANCH

            composer require dof-dss/nidirect-site-modules:dev-development dof-dss/nidirect-migrations:dev-development \
              dof-dss/nidirect-d8-test-install-profile:dev-development dof-dss/nicsdru_origins_theme:dev-development \
              dof-dss/nicsdru_origins_modules:dev-development dof-dss/nicsdru_nidirect_theme:dev-development

            git add composer.*
            git commit -m "Set dof-dss packages to HEAD development for build"

            # Push to fixed, non-integrating build branch. GitHub webhook integration will propagate this
            # to platform.sh for later steps to use.
            git push -f origin $EDGE_BUILD_BRANCH

            # Pause for webhook to propagate the change from GH to PSH.
            sleep 10s
      - run:
          name: Activate the environment if not found.
          command: |
            if ! /home/circleci/.platformsh/bin/platform environment:list -p $PLATFORM_PROJECT_ID -I --no-header --pipe | grep -q $EDGE_BUILD_BRANCH; then
              echo "No active environment for $EDGE_BUILD_BRANCH found, attempt to activate one."
              /home/circleci/.platformsh/bin/platform environment:activate -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH -y
            fi
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  # Separate task to allow us to sync data on PSH environments, without pauses in other jobs.
  sync_data:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    steps:
      - checkout_code
      - run:
          name: Checkout edge branch
          command: |
            cd ~/project
            git checkout -b $EDGE_BUILD_BRANCH
      - install_php_os_extensions
      - install_platformsh_tools
      - run:
          name: Trigger a data sync from production environment to nightly edge build.
          command: |
            /home/circleci/.platformsh/bin/platform sync data -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH -y
      - run:
          name: Turn off fastly module to allow for cleaner config import
          command: |
            /home/circleci/.platformsh/bin/platform environment:drush pmu fastly -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
      - run:
          name: Refresh configuration as our db will contain active prod config after sync operation
          command: |
            /home/circleci/.platformsh/bin/platform environment:drush cim -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
      - run:
          name: Run structure sync import all
          command: |
            /home/circleci/.platformsh/bin/platform environment:drush "ia --choice=safe" -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
      - run:
          name: Rebuild Taxonomy Entity Index
          command: |
            /home/circleci/.platformsh/bin/platform environment:drush tei-rebuild -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
      - run:
          name: Set GAC state variable
          command: |
            /home/circleci/.platformsh/bin/platform environment:drush "sset google_analytics_counter.access_token ${GAC_ACCESS_TOKEN}" -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
      - run:
          name: Force purge of Solr index
          command: /home/circleci/.platformsh/bin/platform ssh -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH "curl http://${PLATFORM_SOLR_HOST}/solr/default/update --data '<delete><query>*:*</query></delete>' -H 'Content-type:text/xml; charset=utf-8' && curl http://${PLATFORM_SOLR_HOST}/solr/default/update --data '<commit/>' -H 'Content-type:text/xml; charset=utf-8'"
      - run:
          name: Rebuild the Solr index
          command: |
            /home/circleci/.platformsh/bin/platform environment:drush sapi-rt -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform environment:drush sapi-c -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform environment:drush sapi-r -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform environment:drush sapi-i -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH

workflows:
  version: 2
  # Our default pipeline that tests the integrity of our build + any tests.
  # TODO: integrate a deploy job so that Circle CI can relay changes across to platform.sh
  # rather than rely on the present webhook integration between GitHub and platform.sh repos.
  build-test-deploy:
    jobs:
      - build
      - coding_standards:
          requires:
            - build
      - deprecated_code:
          requires:
            - build
      - unit_kernel_tests:
          requires:
            - build

  # A nightly build of the project, using all dof-dss packages at HEAD from development branch.
  nightly-edge-build:
    triggers:
      - schedule:
          # At 00:00 on every day-of-week from Monday through Friday
          cron: "0 0 * * 1-5"
          filters:
            branches:
              only:
                - development
    jobs:
      - build
      - coding_standards:
          requires:
            - build
      - deprecated_code:
          requires:
            - build
      - unit_kernel_tests:
          requires:
            - build
      - edge_build:
          requires:
            - build

  # A separate scheduled workflow to sync the data after the nightly build completes.
  # This is separate to avoid using build time/compute units with arbitrary sleep commands;
  # platform.sh deploy hooks can take a few minutes to execute after commits are relayed to it.
  nightly-content-sync:
    triggers:
      - schedule:
          # At 00:30 on every day-of-week from Monday through Friday
          cron: "30 0 * * 1-5"
          filters:
            branches:
              only:
                - development
    jobs:
      - build_edge_branch
      - sync_data:
          requires:
            - build_edge_branch
      - functional_tests:
          requires:
            - sync_data
