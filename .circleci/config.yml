# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
version: 2

jobs:
  # Tests the integrity of the build, stores the results in a workspace for re-use in later jobs.
  build:
    docker:
      - image: circleci/php:7.2.20-apache-browsers
    steps:
      # Add SSH user key so we can access related repositories as part of our initial clone + composer install command.
      - add_ssh_keys:
          fingerprints:
            - "b3:f6:e6:98:bd:8c:dd:c9:c0:52:f6:93:a9:fd:ee:5b"
      - checkout
      - run:
          name: Validate composer.json and composer.lock file for consistency
          command: composer validate --no-check-all --strict
      - run:
          name: Add GitHub access token for composer
          command: echo 'composer config -g github-oauth.github.com $GITHUB_TOKEN' >> $BASH_ENV
      - run:
            name: Add OS and PHP extensions
            command: |
              sudo apt-get update
              sudo apt-get install -y libpng-dev
              sudo docker-php-ext-install gd
              composer global require hirak/prestissimo
      - restore_cache:
          keys:
          - composer-{{ checksum "composer.lock" }}
      - run:
          name: Fetch dependencies with composer
          command: |
            composer install --no-interaction --optimize-autoloader
            composer drupal:scaffold
            composer run-script post-install-cmd
      - save_cache:
          key: composer-{{ checksum "composer.lock" }}
          paths:
            - $HOME/.composer/cache
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  # Test for coding standards and deprecated code.
  static_analysis:
    docker:
      - image: circleci/php:7.2.20-apache-browsers
    steps:
      # Add SSH user key so we can access related repositories as part of our initial clone + composer install command.
      - add_ssh_keys:
          fingerprints:
            # TODO: change this SSH key fingerprint to dof-dss key, once it is available.
            - "40:ee:b5:e2:37:3d:e5:e0:79:7f:95:a3:1d:b5:7d:c9"
      - attach_workspace:
          at: ./
      - run:
            name: Add OS and PHP extensions/config
            command: |
              sudo apt-get update
              sudo apt-get install -y libpng-dev
              sudo docker-php-ext-install gd
              composer global require hirak/prestissimo
      - run:
          name: PHPCS static analysis
          command: /home/circleci/project/phpcs.sh /home/circleci/project "/home/circleci/project/web/modules/custom /home/circleci/project/web/modules/migrate /home/circleci/project/web/themes/custom"
      - run:
         name: Deprecated code check
         command: |
            cd /home/circleci/project
            vendor/bin/drupal-check /home/circleci/project/web/modules/custom

  # Run any unit tests and any kernel tests against a vanilla D8 site + our site config imported over it (no predefined content).
  unit_kernel_tests:
    docker:
      - image: circleci/php:7.2.20-apache-browsers
      - image: circleci/mysql:5.7.27
    steps:
      # Add SSH user key so we can access related repositories as part of our initial clone + composer install command.
      - add_ssh_keys:
          fingerprints:
            # TODO: change this SSH key fingerprint to dof-dss key, once it is available.
            - "40:ee:b5:e2:37:3d:e5:e0:79:7f:95:a3:1d:b5:7d:c9"
      - attach_workspace:
          at: ./
      - run:
            name: Add OS and PHP extensions/config
            command: |
              sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
              sudo apt-get update
              sudo apt-get install -y libpng-dev mariadb-client rsync
              sudo docker-php-ext-install gd pdo_mysql
              composer global require hirak/prestissimo
      - run:
            name: Copy vhost into place
            command: |
              sudo cp .circleci/drupal.vhost /etc/apache2/sites-available/drupal.conf
      - run:
            name: Enable web server and vhosts
            command: |
              sudo a2enmod rewrite
              sudo a2dissite 000-default
              sudo a2ensite drupal
              sudo service apache2 start
      - run:
            name: Install Drupal and configure settings
            command: |
              # Should be scaffolded by now.
              cd /home/circleci/project/web
              cp sites/default/default.settings.php sites/default/settings.php
              cp sites/default/default.services.yml sites/default/services.yml
              # Copy in our environment specific settings to the settings.php file.
              cp /home/circleci/project/.circleci/drupal.settings.php sites/default/settings.php
              # Copy PHPUnit config into core folder.
              cp /home/circleci/project/.circleci/phpunit.circleci.xml core/
              # Install Drupal (or restore from DB dump at this point).
              ../vendor/bin/drush site-install -y standard --site-name="NI Direct"
              # Enable migrate_nidirect_utils.
              ../vendor/bin/drush en -y migrate_nidirect_utils
              # No migrate db, which drupal console expects
              # so we borrow the equivalent drupal-console commands.
              ../vendor/bin/drush cset -y "system.site" uuid "${UUID}"
              ../vendor/bin/drush scr ../.circleci/drupal.delete-shortcuts.php
              # Import our config.
              ../vendor/bin/drush cim -y
      - run:
            name: Copy files into webroot
            command: |
              # Copy our build into position (./ suffix ensures hidden files are copied too).
              sudo rsync -avq /home/circleci/project/. /var/www/html
      - run:
            name: PHPUnit tests (unit)
            command: |
              cd /var/www/html/web/core
              ../../vendor/bin/phpunit -c /var/www/html/web/core/phpunit.circleci.xml --testsuite unit --group nidirect
      - run:
            name: PHPUnit tests (kernel)
            command: |
              cd /var/www/html/web/core
              ../../vendor/bin/phpunit -c /var/www/html/web/core/phpunit.circleci.xml --testsuite kernel --group nidirect

  # Our most expensive, full stack tests. Requires up to date content and services for chromedriver, yarn and database.
  ui_tests:
    docker:
      - image: circleci/php:7.2.20-apache-node-browsers
      - image: circleci/mysql:5.7.27
      - image: drupalci/chromedriver:production
        environment:
          CHROMEDRIVER_WHITELISTED_IPS: ""
          CHROMEDRIVER_URL_BASE: "/wd/hub"
    steps:
      # Add SSH user key so we can access related repositories as part of our initial clone + composer install command.
      - add_ssh_keys:
          fingerprints:
            # TODO: change this SSH key fingerprint to dof-dss key, once it is available.
            - "40:ee:b5:e2:37:3d:e5:e0:79:7f:95:a3:1d:b5:7d:c9"
      - attach_workspace:
          at: ./
      - run:
            name: Add OS and PHP extensions/config
            command: |
              sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
              # Add yarn deb repo.
              curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
              sudo echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

              sudo apt-get update
              sudo apt-get install -y libpng-dev mariadb-client rsync gnupg apt-transport-https yarn
              sudo docker-php-ext-install gd pdo_mysql

              composer global require hirak/prestissimo
      # TODO: remove this step once we have db dumps available over SSH/scp location.
      - run:
          name: SSH hack for github/composer rubbish
          command: |
            mkdir -p /home/circleci/.ssh
            touch /home/circleci/.ssh/known_hosts
            ssh-keyscan github.com >> /home/circleci/.ssh/known_hosts
      - run:
            name: Copy vhost into place
            command: |
              sudo cp .circleci/drupal.vhost /etc/apache2/sites-available/drupal.conf
      - run:
            name: Enable web server and vhosts
            command: |
              sudo a2enmod rewrite
              sudo a2dissite 000-default
              sudo a2ensite drupal
              sudo service apache2 start
      - run:
            name: Set up Drupal and configure settings
            command: |
              # Should be scaffolded by now.
              cd /home/circleci/project/web
              cp sites/default/default.settings.php sites/default/settings.php
              cp sites/default/default.services.yml sites/default/services.yml
              # Copy in our environment specific settings to the settings.php file.
              cp /home/circleci/project/.circleci/drupal.settings.php sites/default/settings.php
              # Copy PHPUnit config into core folder.
              cp /home/circleci/project/.circleci/phpunit.circleci.xml core/
              # Copy Nightwatch conf files into place.
              cat core/.env.example | sed -e "s|\(^DRUPAL_TEST_BASE_URL\)\(.\+\)|\1=http:\/\/localhost|g" > core/.env
              sed -i -e "s|\(#\)\(DRUPAL_NIGHTWATCH_SEARCH_DIRECTORY\)=|\2=../|g" core/.env
              sed -i -e "s|sqlite:\/\/localhost\/sites\/default\/files/db.sqlite|mysql://root:@127.0.0.1/circle_test|g" core/.env
              sed -i -e "s|^DRUPAL_TEST_CHROMEDRIVER_AUTOSTART=true|DRUPAL_TEST_CHROMEDRIVER_AUTOSTART=false|g" core/.env
              sed -i -e "s|\(#\)\(DRUPAL_TEST_WEBDRIVER_CHROME_ARGS\)=|\2=\"--disable-gpu --headless --no-sandbox\"|g" core/.env
              sed -i -e "s|\(^DRUPAL_NIGHTWATCH_OUTPUT\)=reports/nightwatch|\1=/home/circleci/nightwatch-reports|g" core/.env
              mkdir -p /home/circleci/nightwatch-reports
              # Install npm packages
              cd /home/circleci/project/web/core
              yarn install
              cd /home/circleci/project/web/modules/custom
              yarn install
              cd /home/circleci/project/web/modules/migrate/nidirect-migrations/migrate_nidirect_node
              yarn install

              # Fetch database from our defined endpoint
              git clone --depth=1 ${DB_SOURCE_URL} /home/circleci/dbs
              # Restore to db service
              cd /home/circleci/project/web
              gzip -dc /home/circleci/dbs/nidirect--ui-test-sanitised.sql.gz | ../vendor/bin/drush sqlc
              # Remove downloaded db file.
              sudo rm -rf /home/circleci/dbs
              # Clear caches/container rebuild for this environment.
              ../vendor/bin/drush cr
      - run:
            name: Copy files into webroot
            command: |
              # Copy our build into position (./ suffix ensures hidden files are copied too).
              sudo rsync -avq /home/circleci/project/. /var/www/html
      - run:
            name: UI tests with Nightwatch.js
            command: yarn --cwd=/var/www/html/web/core test:nightwatch --skiptags core

  # TBC: Deploy task that will package up/push our code onto a target system.
  deploy:
    docker:
      - image: circleci/php:7.2.20-apache-browsers
    steps:
      - add_ssh_keys:
          fingerprints:
            # TODO: change this SSH key fingerprint to dof-dss key, once it is available.
            - "40:ee:b5:e2:37:3d:e5:e0:79:7f:95:a3:1d:b5:7d:c9"
      - run: "TBC: Deploy task that will package up/push our code onto a target system."

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - static_analysis:
          requires:
            - build
      - unit_kernel_tests:
          requires:
            - build
      # - ui_tests:
      #     requires:
      #       - build
      - deploy:
          # Deploy task only to run for tags matching the 8.x- pattern, no branches.
          requires:
            - build
            - static_analysis
            - unit_kernel_tests
            # - ui_tests
          filters:
            tags:
              only: /^8.x-*/
            branches:
              ignore: /.*/
